pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- let's write a program
-- that handles collision

--[x] create an obj and move it
--[x] collision detection func
--[] collision resolution
--[] sample stepping

--[]circ_col
function _init()
	debug=false
	p={
		x=60,
		y=60,
		s_id=1,
		spd=5
	}
	
	p.col=function(s)
		return {
			{s.x,s.y},
			{s.x+7,s.y+7}
		}
	end
	
	blocks={
		{
			col=function()return{
				{100,60},
				{107,67}
			} end
		},
		{
			col=function()return{
				{60,20},
				{67,27}
			} end
		},
		{
			col=function()return{
				{20,60},
				{27,67}
			} end
		}
	}
	
	walls=mk_map_walls(0,0)
end
-->8
--update

function _update()
	if(btnp(🅾️))debug=not debug
	if(btn(➡️))p.x+=1
	if(btn(⬅️))p.x-=1
	if(btn(⬇️))p.y+=1
	if(btn(⬆️))p.y-=1
end

-->8
--draw

function _draw()
	cls()
	map(0,0)
	draw_debug_notif()
	draw_p()
	draw_wall_cols()
	draw_blocks()
end

function draw_p()
	spr(p.s_id,p.x,p.y)
	if(debug)then
		draw_p_col()
	end
end

function draw_p_col()
	local b_color=10
	local c
	
	cb=aabb_col_tbl(p:col(),blocks)
	cw=aabb_col_tbl(p:col(),walls)
	
	if(cb or cw)b_color=8
	
	draw_box(p:col(),b_color)
end

function draw_blocks()
	for b in all(blocks) do
		local col=b:col()
		spr(5,col[1][1],col[1][2])
		local c=10
		if(aabb(col,p:col()))c=8
		draw_box(col,c)
	end
end

function draw_wall_cols()
	for w in all(walls) do
		local c=10
		if(aabb(w:col(),p:col()))c=8
		draw_box(w:col(),c)
	end
end

function draw_debug_notif()
	local str="show player collision box: "
	str=str..tostr(debug)
	print(str,0,100,7)
	print("toggle: z",44,108,7)
end


-->8
-- a box is a tuple consisting
-- of a start point and an end
-- point.

-- a point is a tuple consisting
-- of an x and a y value.

--box 1, box 2
function aabb(b1,b2)
	return b1[1][1] <= b2[2][1] 
			 and b1[2][1] >= b2[1][1] 
			 and	b1[1][2] <= b2[2][2] 
			 and	b1[2][2] >= b2[1][2]
end

--box, color
function draw_box(box,c)
	rect(
		box[1][1],
		box[1][2],
		box[2][1],
		box[2][2],
		c
	)
end

function aabb_col_tbl(col,t)
	for i in all(t) do
	 if (aabb(col,i:col()))then
	 	return i
	 end
	end
	return false
end

function mk_map_walls(x,y)
	local walls={}
	for off_x=0,15 do
		for off_y=0,15 do
			local s=mget(x+off_x,y+off_y)
			if(fget(s,0)) then
				add(walls,{col=function()
					return {
						{off_x*8,off_y*8},
						{off_x*8+7,off_y*8+7}
					}
				end})
			end
		end
	end
	return walls
end
__gfx__
0000000000777700dddddddd50000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000007000070dd0000dd050000500d0000d00ddddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070007000070d0d00d0d005005000dd00dd00d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700007000070d00dd00d000000000d0dd0d00ddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000777700d00dd00d000000000d0000d00d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000077000d0d00d0d005005000d0000d00d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000077000dd0000dd050000500d0000d00ddddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000700700dddddddd50000005d000000d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
